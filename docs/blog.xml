<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>John Pinto</title>
<link>https://johnppinto.github.io/blog/blog.html</link>
<atom:link href="https://johnppinto.github.io/blog/blog.xml" rel="self" type="application/rss+xml"/>
<description>This is John Pinto&#39;s Personal Blog.</description>
<generator>quarto-1.3.302</generator>
<lastBuildDate>Fri, 31 Mar 2023 18:30:00 GMT</lastBuildDate>
<item>
  <title>Riding the Waves - PyTorch and Lightning 2.0</title>
  <dc:creator>John Pinto</dc:creator>
  <link>https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/index.html</link>
  <description><![CDATA[ 




<style>
.quarto-figure-center > figure {
  text-align: center;
}
</style>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="featured.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/featured.png" class="img-fluid figure-img"></a></p>
</figure>
</div>
<section id="quick-facts-on-pytorch-and-lightning-2.0-release" class="level1">
<h1>Quick Facts on PyTorch and Lightning 2.0 Release</h1>
<p>PyTorch and PyTorch Lightning (2.0) were released on 15 March 2023.</p>
<p><strong>PyTorch</strong>: The main focus is the improvement in the speed, even the release article title says it</p>
<blockquote class="blockquote">
<p>“PyTorch 2.0: Our next generation release that is faster, more Pythonic and Dynamic as ever”</p>
</blockquote>
<p>you can read the article over <a href="https://pytorch.org/blog/pytorch-2.0-release/">here</a>.</p>
<p>This speed that they mention comes with just a single line of code. After you have created your model you just use this code and the code modifies your model to perform at its best level.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>()</span></code></pre></div>
<p>They have even mentioned the details while testing the new functionality and how the <code>torch.compile()</code> can improve the speed of the models from different sources [<a href="https://github.com/huggingface/transformers">HuggingFace</a>, <a href="https://github.com/rwightman/pytorch-image-models">TIMM</a> and <a href="https://github.com/pytorch/benchmark/">TorchBench</a>].</p>
<p>To run this amazing compiled model, PyTorch introduces new technologies - <strong>TorchDynamo, AOTAutograd, PrimTorch and TorchInductor</strong>. All of these new technologies are working in a flow and they are broken down into three phases - <strong>Graph Acquisition, Graph Lowering and Graph Compilation</strong>. You can check all of this over <a href="https://pytorch.org/get-started/pytorch-2.0/">here</a>, they have explained the complex system in easy to understand way.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p>Read the above-linked article, especially the section on <a href="https://pytorch.org/get-started/pytorch-2.0/#technology-overview">technology overview</a>, this will help you understand the hyper-parameters workings within the torch.compile().</p>
</div>
</div>
<p><strong>PyTorch Lightning</strong> on the other hand was just kind of following PyTorch, they have just mentioned that Lightning supports PyTorch 2.0 with backward compatibility and this itself makes it a mature release. But what makes Lightning amazing in this release is not the support but the introduction to a new library “<a href="https://lightning.ai/pages/open-source/fabric/">Lightning Fabric</a>”.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="images/fabric.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="The space where “Lightning Fabric” occupies."><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/images/fabric.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">The space where “Lightning Fabric” occupies.</figcaption><p></p>
</figure>
</div>
<p>PyTorch Lightning has a history of converting the vanilla style of PyTorch code by removing all the boilerplate code. This way it helps in setting up the model training much faster but at the cost of higher complexity when you try to control some things that you can’t. Now, that Fabric has come into the picture this changes the way you are going to train your model. They have given control of some of the complex tasks like accelerators, distributed strategies, and mixed precision, while still retaining full control of your training loop.</p>
<section id="caveats-part-of-the-release" class="level2">
<h2 class="anchored" data-anchor-id="caveats-part-of-the-release">Caveats Part of the Release</h2>
<p>PyTorch and PyTorch Lightning 2.0 are stable releases but there is some information that needs attention.</p>
<ol type="1">
<li><strong>Hardware</strong>: This speed-up performance that the PyTorch team speaks of is based on specific hardware, broadly they have mentioned that NVIDIA Volta and Ampere server-class GPUs are capable to produce decent results. So desktop GPUs will need to wait for later releases.</li>
<li><strong>Model Saving/Exporting</strong>: Right now the compiled model can only be saved using the <code>model.state_dict()</code> method. You won’t be able to save the object of the model, which returns an error if you try to. You can read the <a href="https://pytorch.org/get-started/pytorch-2.0/#serialization">serialization</a> part of the article that I have mentioned above. Along with the save part, the team will also introduce <code>torch.export()</code> mode in the later release.</li>
</ol>
</section>
</section>
<section id="enough-theory-time-to-experiment" class="level1">
<h1>Enough Theory, Time to Experiment…</h1>
<p>Before I start showing my code and results, let me brief you about it. Many websites were already showing the methodology and results of PyTorch 2.0 on different models, you can check the blog article of <a href="https://api.wandb.ai/links/gladiator/d0o6cxp0">Weights and Biases</a> that show how they implemented and test the new features.</p>
<p>I wanted to try something different so I choose to implement and test it on a video classification problem rather than an Image Classification or NLP problem. For my Video Classification problem, I went with the <a href="https://serre-lab.clps.brown.edu/resource/hmdb-a-large-human-motion-database">HMDB51 dataset</a>. Now, the next step was selecting the hardware, majority of the website has shown that they were using Nvidia A100 GPU, and even PyTorch themselves have shown the results based on this hardware and have recommended GPU similar to this type. For me the only available Ampere GPU was Nvidia <strong>A4000 (CUDA: 8.6)</strong> and as a reference, I even used a <strong>Tesla T4 (CUDA: 7.5)</strong>.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>There’s a reason why PyTorch compile mode needs Volta and Ampere GPUs because the minimum CUDA compute capability needs to be more than 8.0. You can check your hardware computing capability on the <a href="https://developer.nvidia.com/cuda-gpus">Nvidia website</a>.</p>
</div>
</div>
<section id="methodology" class="level3">
<h3 class="anchored" data-anchor-id="methodology">Methodology</h3>
<p>The main motive of this testing is to compare the benchmark of PyTorch 1.13 (Eager Mode) and PyTorch 2.0 (Compile Mode).</p>
<p>There are three Phases of testing that I have conducted:</p>
<ol type="1">
<li>PyTorch Test</li>
<li>PyTorch Lightning Test</li>
<li>Lightning Fabric Test</li>
</ol>
</section>
<section id="dataset-dataloaders-and-model-details" class="level3">
<h3 class="anchored" data-anchor-id="dataset-dataloaders-and-model-details">Dataset, Dataloaders and Model Details</h3>
<ul>
<li><p>Dataset contains 51 Classes, I have used only <strong>20 classes</strong> for all the experiments.</p></li>
<li><p>The dataset contained a fixed sequence length of <strong>16 frames</strong>.</p></li>
<li><p>Total Training Sample: <strong>1898</strong> and Total Validation/Testing Samples: <strong>632</strong>.</p></li>
<li><p>Batch size: <strong>16</strong> and the number of workers was set to the max of CPU cores: <strong>8</strong>.</p></li>
<li><p><a href="https://arxiv.org/abs/2104.11227">MVit V2 Small</a> Model was used for all the experiments from <a href="https://pytorch.org/vision/main/models/generated/torchvision.models.video.mvit_v2_s.html">torchvision</a>.</p></li>
<li><p><strong>Cross entropy</strong> was used as a loss function and <strong>Adam optimizer</strong> was used for optimizing the model at a default learning rate of <strong>1e-4.</strong></p></li>
<li><p>In all the experiments the model was trained for <strong>3 epochs</strong>.</p></li>
</ul>
<p>You can check my <a href="https://github.com/JohnPPinto/HMDB51_human_motion_recognition_pytorch/blob/main/HMDB51_human_action_recognition_pytorch.ipynb" target="_blank">Jupyter notebook</a> for a complete understanding of the dataset preprocessing, Dataloaders and model details.</p>
</section>
<section id="phase-1---pytorch-implementation" class="level3">
<h3 class="anchored" data-anchor-id="phase-1---pytorch-implementation">Phase 1 - PyTorch Implementation</h3>
<p>For this phase, I have used the basic training pipeline code used in PyTorch.</p>
<p><strong>Defining Training Structure:</strong></p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_step(model, dataloader, loss_fn, optimizer, device, num_classes):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Trains a pytorch model by going into train mode and applying forward pass,</span></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    loss calculation and optimizer step.</span></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A pytorch model for training.</span></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A pytorch dataloader for training.</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A pytorch loss to calculate the model's prediction loss.</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: A pytorch optimizer to minimize the loss function.</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: A torch device to allocate tensors on 'cpu' or 'cuda'.</span></span>
<span id="cb2-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer that indicates total number of classes in the dataset.</span></span>
<span id="cb2-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: A tuple of training loss and training accuracy.</span></span>
<span id="cb2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model on training mode</span></span>
<span id="cb2-18">    model.train()</span>
<span id="cb2-19">    </span>
<span id="cb2-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting train loss and accuracy </span></span>
<span id="cb2-21">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-22">    train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, </span>
<span id="cb2-23">                                      num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes).to(device)</span>
<span id="cb2-24">    </span>
<span id="cb2-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Looping the dataloaders</span></span>
<span id="cb2-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, (X, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader), </span>
<span id="cb2-27">                              desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Training'</span>, </span>
<span id="cb2-28">                              total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), </span>
<span id="cb2-29">                              unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>):</span>
<span id="cb2-30">        X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device), y.to(device)</span>
<span id="cb2-31">        </span>
<span id="cb2-32">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 step to train a model</span></span>
<span id="cb2-33">        y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Forward pass</span></span>
<span id="cb2-34">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(y_pred, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Calculate loss</span></span>
<span id="cb2-35">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() </span>
<span id="cb2-36">        optimizer.zero_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Initiate optimizer</span></span>
<span id="cb2-37">        loss.backward() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. Backward pass</span></span>
<span id="cb2-38">        optimizer.step() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. Updating the model parameters</span></span>
<span id="cb2-39">        </span>
<span id="cb2-40">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating the training accuracy</span></span>
<span id="cb2-41">        y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(torch.softmax(y_pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-42">        train_acc.update(y_pred_labels, y)</span>
<span id="cb2-43">    </span>
<span id="cb2-44">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Averaging the loss and accuracy</span></span>
<span id="cb2-45">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)</span>
<span id="cb2-46">    train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_acc.compute()</span>
<span id="cb2-47">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> train_loss, train_acc</span>
<span id="cb2-48"></span>
<span id="cb2-49"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_step(model, dataloader, loss_fn, device, num_classes):</span>
<span id="cb2-50">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Test a pytorch model by going into eval mode and applying forward pass,</span></span>
<span id="cb2-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and loss calculation.</span></span>
<span id="cb2-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb2-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A pytorch model for testing.</span></span>
<span id="cb2-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A pytorch dataloader for testing.</span></span>
<span id="cb2-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A pytorch loss to calculate the model's prediction loss.</span></span>
<span id="cb2-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: A torch device to allocate tensors on 'cpu' or 'cuda'.</span></span>
<span id="cb2-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer that indicates total number of classes in the dataset.</span></span>
<span id="cb2-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb2-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: A tuple of testing loss and testing accuracy.</span></span>
<span id="cb2-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model on evaluation mode</span></span>
<span id="cb2-64">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb2-65">    </span>
<span id="cb2-66">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting train loss and accuracy </span></span>
<span id="cb2-67">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb2-68">    test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, </span>
<span id="cb2-69">                                     num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes).to(device)</span>
<span id="cb2-70">    </span>
<span id="cb2-71">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using inference mode</span></span>
<span id="cb2-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb2-73">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Looping the dataloaders</span></span>
<span id="cb2-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, (X, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader), </span>
<span id="cb2-75">                                  desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Evaluation'</span>, </span>
<span id="cb2-76">                                  total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), </span>
<span id="cb2-77">                                  unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>):</span>
<span id="cb2-78">            X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X.to(device), y.to(device)</span>
<span id="cb2-79">            </span>
<span id="cb2-80">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb2-81">            y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb2-82">            </span>
<span id="cb2-83">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb2-84">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(y_pred, y)</span>
<span id="cb2-85">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb2-86">            </span>
<span id="cb2-87">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate accuracy</span></span>
<span id="cb2-88">            y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_pred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-89">            test_acc.update(y_pred_labels, y)</span>
<span id="cb2-90">    </span>
<span id="cb2-91">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Averaging the loss and accuracy</span></span>
<span id="cb2-92">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)</span>
<span id="cb2-93">    test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_acc.compute()</span>
<span id="cb2-94">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> test_loss, test_acc</span>
<span id="cb2-95"></span>
<span id="cb2-96"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> model_train(epochs, model, train_dataloader, test_dataloader, optimizer, loss_fn, device, num_classes):</span>
<span id="cb2-97">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Trains a pytorch model for a certain number of epochs going through the model training </span></span>
<span id="cb2-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and testing stage, and accumalating the loss, accuracy, and training and testing time.</span></span>
<span id="cb2-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb2-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epochs: A integer to run the training and testing stage. </span></span>
<span id="cb2-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A pytorch model for training and testing.</span></span>
<span id="cb2-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataloader: A pytorch dataloader for training.</span></span>
<span id="cb2-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        test_dataloader: A pytorch dataloader for testing.</span></span>
<span id="cb2-106"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A pytorch loss to calculate the model's prediction loss.</span></span>
<span id="cb2-107"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: A pytorch optimizer to minimize the loss function.</span></span>
<span id="cb2-108"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        device: A torch device to allocate tensors on 'cpu' or 'cuda'.</span></span>
<span id="cb2-109"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer that indicates total number of classes in the dataset.</span></span>
<span id="cb2-110"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb2-111"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: A tuple of accumaleted results in dict and total training time in float datatype.</span></span>
<span id="cb2-112"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-113">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty result</span></span>
<span id="cb2-114">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: [],</span>
<span id="cb2-115">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_acc'</span>: [],</span>
<span id="cb2-116">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>: [],</span>
<span id="cb2-117">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_acc'</span>: [],</span>
<span id="cb2-118">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_epoch_time(min)'</span>: [],</span>
<span id="cb2-119">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_epoch_time(min)'</span>: []}</span>
<span id="cb2-120">    </span>
<span id="cb2-121">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through training and testing steps</span></span>
<span id="cb2-122">    model_train_start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb2-123">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training and Evaluation for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Epochs'</span>, unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epochs'</span>):</span>
<span id="cb2-124">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training the model and timing it.</span></span>
<span id="cb2-125">        train_epoch_start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb2-126">        train_loss, train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_step(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb2-127">                                           dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader, </span>
<span id="cb2-128">                                           loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb2-129">                                           optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb2-130">                                           device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device, </span>
<span id="cb2-131">                                           num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb2-132">        train_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb2-133">        train_epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (train_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> train_epoch_start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb2-134">        </span>
<span id="cb2-135">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the model and timing it</span></span>
<span id="cb2-136">        test_epoch_start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb2-137">        test_loss, test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_step(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb2-138">                                        dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader,</span>
<span id="cb2-139">                                        loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn,</span>
<span id="cb2-140">                                        device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device,</span>
<span id="cb2-141">                                        num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb2-142">        test_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb2-143">        test_epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (test_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> test_epoch_start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb2-144">        </span>
<span id="cb2-145">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the model result</span></span>
<span id="cb2-146">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch: [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] | train_loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | train_acc: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | train_time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_epoch_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min | '</span></span>
<span id="cb2-147">              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'test loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | test_acc: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | test_time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_epoch_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min'</span>)</span>
<span id="cb2-148">        </span>
<span id="cb2-149">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saving the results</span></span>
<span id="cb2-150">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>].append(train_loss)</span>
<span id="cb2-151">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_acc'</span>].append(train_acc.detach().cpu().item())</span>
<span id="cb2-152">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>].append(test_loss)</span>
<span id="cb2-153">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_acc'</span>].append(test_acc.detach().cpu().item())</span>
<span id="cb2-154">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_epoch_time(min)'</span>].append(train_epoch_time)</span>
<span id="cb2-155">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_epoch_time(min)'</span>].append(test_epoch_time)</span>
<span id="cb2-156">        </span>
<span id="cb2-157">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating total model training time</span></span>
<span id="cb2-158">    model_train_end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb2-159">    total_train_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_train_end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> model_train_start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb2-160">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Total Model Training Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_train_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min'</span>)</span>
<span id="cb2-161">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results, total_train_time</span></code></pre></div>
</details>
<p><strong>Training the Model:</strong></p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing the model and dataloaders</span></span>
<span id="cb3-4">model, transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_model(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb3-5">model.to(device)</span>
<span id="cb3-6">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb3-7">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intializing loss and optimizer</span></span>
<span id="cb3-10">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.CrossEntropyLoss()</span>
<span id="cb3-11">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting up compiled model(Introduced in PyTorch 2.0.0)</span></span>
<span id="cb3-14">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(model, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only used it durning Exp 2.</span></span>
<span id="cb3-15"></span>
<span id="cb3-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training the model using the function</span></span>
<span id="cb3-17">NUM_EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb3-18">exp2_results, exp2_total_train_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_train(epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_EPOCHS,</span>
<span id="cb3-19">                                                  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb3-20">                                                  train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader,</span>
<span id="cb3-21">                                                  test_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader,</span>
<span id="cb3-22">                                                  optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer,</span>
<span id="cb3-23">                                                  loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn,</span>
<span id="cb3-24">                                                  device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device,</span>
<span id="cb3-25">                                                  num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes))</span></code></pre></div>
</details>
<div data-notebook="notebooks/blog_figures.ipynb">
<div class="cell" data-outputid="8447c764-4a71-4dbf-bafa-1c4b8c5a0765" data-execution_count="4">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/fig-pytorch-exp-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3" title="Benchmark Comparison between PyTorch Eager and Compile Mode for 3 Epochs."><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/index_files/figure-html/fig-pytorch-exp-output-1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Benchmark Comparison between PyTorch Eager and Compile Mode for 3 Epochs.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>As you can see the loss and accuracy are quite similar for both experiments. The result needs to be the same because we do not change the model and the epoch is also the same for both. This is good for the new features that it does not make any changes to the model rather a container is created and the model is fitted within that container.</p>
<p>The PyTorch team has mentioned that the major changes you will see are with speed, for this to happen all the processing is to be done in the initial epoch later there should be an increase in speed, but in my case, the eager is doing much better than the compile mode. This might be due to the hardware that I am using the A4000 GPU.</p>
</section>
<section id="phase-2---pytorch-lightning-implementation" class="level3">
<h3 class="anchored" data-anchor-id="phase-2---pytorch-lightning-implementation">Phase 2 - PyTorch Lightning Implementation</h3>
<p>The training pipeline is similar to before but the structure is defined as per the lightning methodology.</p>
<p><strong>Defining Training Structure:</strong></p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PyLightHMDB51(L.LightningModule):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    A Lightning Module containing Model training and validation step.</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters: </span></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A PyTorch Model.</span></span>
<span id="cb4-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A PyTorch loss function.</span></span>
<span id="cb4-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: A Pytorch Optimizer.</span></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer for total number of classes in the dataset.</span></span>
<span id="cb4-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, model, loss_fn, optimizer, num_classes):</span>
<span id="cb4-11">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">super</span>().<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>()</span>
<span id="cb4-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model</span>
<span id="cb4-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn</span>
<span id="cb4-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> optimizer</span>
<span id="cb4-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_classes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_classes</span>
<span id="cb4-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, </span>
<span id="cb4-17">                                               num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_classes)</span>
<span id="cb4-18">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, </span>
<span id="cb4-19">                                              num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_classes)</span>
<span id="cb4-20">        </span>
<span id="cb4-21">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb4-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model(x)</span>
<span id="cb4-23">    </span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> training_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, train_batch, batch_idx):</span>
<span id="cb4-25">        X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_batch</span>
<span id="cb4-26">        y_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(X)</span>
<span id="cb4-27">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn(y_preds, y)</span>
<span id="cb4-28">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>, loss, prog_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, on_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, on_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-29">        y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(torch.softmax(y_preds, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-30">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train_acc.update(y_pred_labels, y)</span>
<span id="cb4-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_acc'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.train_acc, prog_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, on_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, on_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> loss</span>
<span id="cb4-33">    </span>
<span id="cb4-34">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> validation_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, val_batch, batch_idx):</span>
<span id="cb4-35">        X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> val_batch</span>
<span id="cb4-36">        y_preds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.forward(X)</span>
<span id="cb4-37">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.loss_fn(y_preds, y)</span>
<span id="cb4-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>, loss, prog_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, on_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, on_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-39">        y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(torch.softmax(y_preds, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb4-40">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.test_acc.update(y_pred_labels, y)</span>
<span id="cb4-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.log(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_acc'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.test_acc, prog_bar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, on_step<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, on_epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-42">    </span>
<span id="cb4-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> configure_optimizers(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-44">        optimizers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.optimizer</span>
<span id="cb4-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> optimizers</span></code></pre></div>
</details>
<p><strong>Training the Model</strong>:</p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Creating the pytorch lightning trainer</span></span>
<span id="cb5-4">NUM_EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb5-5">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.pytorch.loggers.CSVLogger(save_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>RESULTS_DIR, </span>
<span id="cb5-6">                                     name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pytorch_lightning_compile_mode"</span>)</span>
<span id="cb5-7">trainer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> L.Trainer(max_epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_EPOCHS, </span>
<span id="cb5-8">                    logger<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logger)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing the model and dataloaders</span></span>
<span id="cb5-11">model, transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_model(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>device)</span>
<span id="cb5-12">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb5-13">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intializing loss and optimizer</span></span>
<span id="cb5-16">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.CrossEntropyLoss()</span>
<span id="cb5-17">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting up compiled model(Introduced in PyTorch 2.0.0)</span></span>
<span id="cb5-20">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(model, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only used it durning Exp 4.</span></span>
<span id="cb5-21"></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing the lightning module class</span></span>
<span id="cb5-23">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyLightHMDB51(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb5-24">                      loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb5-25">                      optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb5-26">                      num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes))</span>
<span id="cb5-27"></span>
<span id="cb5-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fiting the model to trainer.</span></span>
<span id="cb5-29">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb5-30">trainer.fit(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb5-31">            train_dataloaders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader, </span>
<span id="cb5-32">            val_dataloaders<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader)</span>
<span id="cb5-33">end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb5-34">exp4_total_train_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb5-35"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Total Time to train the model: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>exp4_total_train_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min'</span>)</span></code></pre></div>
</details>
<div data-notebook="notebooks/blog_figures.ipynb">
<div class="cell" data-outputid="178b7758-7fdc-4265-fb40-69b9d98ab09f" data-execution_count="6">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/fig-pytorch-light-exp-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4" title="Benchmark Comparison between PyTorch Lightning Eager and Compile Mode for 3 Epochs."><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/index_files/figure-html/fig-pytorch-light-exp-output-1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Benchmark Comparison between PyTorch Lightning Eager and Compile Mode for 3 Epochs.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>Here, while training the model the lightning only logs the loss and accuracy. So understanding the time for every epoch is difficult in this case. But similar to PyTorch the values of the loss and accuracy are not changed so the training was properly done.</p>
</section>
<section id="phase-3---lightning-fabric-implementation" class="level3">
<h3 class="anchored" data-anchor-id="phase-3---lightning-fabric-implementation">Phase 3 - Lightning Fabric Implementation</h3>
<p>Fabric is quite simple for implementing, the code structure is similar to PyTorch that we used in the beginning but we have minor changes, some of the manual processes are automated by fabric, and with this the code has less chance of being broken.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I have added a comment “New by Fabric” for all lines that are modified.</p>
</div>
</div>
<p><strong>Defining Training Structure</strong>:</p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> train_step(model, dataloader, loss_fn, optimizer, fabric, num_classes):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Trains a pytorch model by going into train mode and applying forward pass,</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    loss calculation and optimizer step.</span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A pytorch model for training.</span></span>
<span id="cb6-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A pytorch dataloader for training.</span></span>
<span id="cb6-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A pytorch loss to calculate the model's prediction loss.</span></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: A pytorch optimizer to minimize the loss function.</span></span>
<span id="cb6-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fabric: A Fabric function to setup device for the tensors and gradients.</span></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer that indicates total number of classes in the dataset.</span></span>
<span id="cb6-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb6-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: A tuple of training loss and training accuracy.</span></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb6-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-17">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model on training mode</span></span>
<span id="cb6-18">    model.train()</span>
<span id="cb6-19">    </span>
<span id="cb6-20">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting train loss and accuracy </span></span>
<span id="cb6-21">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-22">    train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes).to(fabric.device) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb6-23">    </span>
<span id="cb6-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Looping the dataloaders</span></span>
<span id="cb6-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, (X, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Training'</span>, total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>):</span>
<span id="cb6-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X, y = X.to(device), y.to(device) # New by Fabric</span></span>
<span id="cb6-27">        </span>
<span id="cb6-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5 step to train a model</span></span>
<span id="cb6-29">        y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. Forward pass</span></span>
<span id="cb6-30">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(y_pred, y) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. Calculate loss</span></span>
<span id="cb6-31">        train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item() </span>
<span id="cb6-32">        optimizer.zero_grad() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. Initiate optimizer</span></span>
<span id="cb6-33">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#loss.backward() # 4. Backward pass</span></span>
<span id="cb6-34">        fabric.backward(loss) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb6-35">        optimizer.step() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 5. Updating the model parameters</span></span>
<span id="cb6-36">        </span>
<span id="cb6-37">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating the training accuracy</span></span>
<span id="cb6-38">        y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.argmax(torch.softmax(y_pred, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-39">        train_acc.update(y_pred_labels, y)</span>
<span id="cb6-40">    </span>
<span id="cb6-41">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Averaging the loss and accuracy</span></span>
<span id="cb6-42">    train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)</span>
<span id="cb6-43">    train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_acc.compute()</span>
<span id="cb6-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> train_loss, train_acc</span>
<span id="cb6-45"></span>
<span id="cb6-46"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_step(model, dataloader, loss_fn, fabric, num_classes):</span>
<span id="cb6-47">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Test a pytorch model by going into eval mode and applying forward pass,</span></span>
<span id="cb6-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and loss calculation.</span></span>
<span id="cb6-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb6-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A pytorch model for testing.</span></span>
<span id="cb6-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        dataloader: A pytorch dataloader for testing.</span></span>
<span id="cb6-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A pytorch loss to calculate the model's prediction loss.</span></span>
<span id="cb6-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fabric: A Fabric function to setup device for the tensors and gradients.</span></span>
<span id="cb6-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer that indicates total number of classes in the dataset.</span></span>
<span id="cb6-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb6-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: A tuple of testing loss and testing accuracy.</span></span>
<span id="cb6-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-60">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Model on evaluation mode</span></span>
<span id="cb6-61">    model.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>()</span>
<span id="cb6-62">    </span>
<span id="cb6-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting train loss and accuracy </span></span>
<span id="cb6-64">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-65">    test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torchmetrics.Accuracy(task<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'multiclass'</span>, num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes).to(fabric.device) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb6-66">    </span>
<span id="cb6-67">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using inference mode</span></span>
<span id="cb6-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb6-69">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Looping the dataloaders</span></span>
<span id="cb6-70">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> batch, (X, y) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(dataloader), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Model Evaluation'</span>, total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader), unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'batch'</span>):</span>
<span id="cb6-71">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># X, y = X.to(device), y.to(device) # New by Fabric</span></span>
<span id="cb6-72">            </span>
<span id="cb6-73">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Forward pass</span></span>
<span id="cb6-74">            y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(X)</span>
<span id="cb6-75">            </span>
<span id="cb6-76">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate loss</span></span>
<span id="cb6-77">            loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> loss_fn(y_pred, y)</span>
<span id="cb6-78">            test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> loss.item()</span>
<span id="cb6-79">            </span>
<span id="cb6-80">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate accuracy</span></span>
<span id="cb6-81">            y_pred_labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y_pred.argmax(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb6-82">            test_acc.update(y_pred_labels, y)</span>
<span id="cb6-83">    </span>
<span id="cb6-84">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Averaging the loss and accuracy</span></span>
<span id="cb6-85">    test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataloader)</span>
<span id="cb6-86">    test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_acc.compute()</span>
<span id="cb6-87">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> test_loss, test_acc</span>
<span id="cb6-88"></span>
<span id="cb6-89"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> model_train(epochs, model, train_dataloader, test_dataloader, optimizer, loss_fn, fabric, num_classes):</span>
<span id="cb6-90">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-91"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Trains a pytorch model for a certain number of epochs going through the model training </span></span>
<span id="cb6-92"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    and testing stage, and accumalating the loss, accuracy, and training and testing time.</span></span>
<span id="cb6-93"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-94"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters:</span></span>
<span id="cb6-95"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        epochs: A integer to run the training and testing stage. </span></span>
<span id="cb6-96"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        model: A pytorch model for training and testing.</span></span>
<span id="cb6-97"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        train_dataloader: A pytorch dataloader for training.</span></span>
<span id="cb6-98"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        test_dataloader: A pytorch dataloader for testing.</span></span>
<span id="cb6-99"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        loss_fn: A pytorch loss to calculate the model's prediction loss.</span></span>
<span id="cb6-100"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        optimizer: A pytorch optimizer to minimize the loss function.</span></span>
<span id="cb6-101"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        fabric: A Fabric function to setup device for the tensors and gradients.</span></span>
<span id="cb6-102"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        num_classes: A integer that indicates total number of classes in the dataset.</span></span>
<span id="cb6-103"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb6-104"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns: A tuple of accumaleted results in dict and total training time in float datatype.</span></span>
<span id="cb6-105"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-106">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create empty result</span></span>
<span id="cb6-107">    results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>: [],</span>
<span id="cb6-108">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_acc'</span>: [],</span>
<span id="cb6-109">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>: [],</span>
<span id="cb6-110">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_acc'</span>: [],</span>
<span id="cb6-111">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_epoch_time(min)'</span>: [],</span>
<span id="cb6-112">               <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_epoch_time(min)'</span>: []}</span>
<span id="cb6-113">    </span>
<span id="cb6-114">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Loop through training and testing steps</span></span>
<span id="cb6-115">    model_train_start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb6-116">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> epoch <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> tqdm(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(epochs), desc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Training and Evaluation for </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> Epochs'</span>, unit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'epochs'</span>):</span>
<span id="cb6-117">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training the model and timing it.</span></span>
<span id="cb6-118">        train_epoch_start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb6-119">        train_loss, train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_step(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb6-120">                                           dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader, </span>
<span id="cb6-121">                                           loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb6-122">                                           optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb6-123">                                           fabric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fabric, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb6-124">                                           num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb6-125">        train_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb6-126">        train_epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (train_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> train_epoch_start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb6-127">        </span>
<span id="cb6-128">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing the model and timing it</span></span>
<span id="cb6-129">        test_epoch_start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb6-130">        test_loss, test_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> test_step(model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model,</span>
<span id="cb6-131">                                        dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader,</span>
<span id="cb6-132">                                        loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn,</span>
<span id="cb6-133">                                        fabric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fabric, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb6-134">                                        num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_classes)</span>
<span id="cb6-135">        test_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb6-136">        test_epoch_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (test_epoch_stop_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> test_epoch_start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb6-137">        </span>
<span id="cb6-138">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the model result</span></span>
<span id="cb6-139">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'Epoch: [</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epoch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>epochs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">] | train_loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | train_acc: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | train_time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>train_epoch_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min | '</span></span>
<span id="cb6-140">              <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'test loss: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_loss<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | test_acc: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_acc<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> | test_time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>test_epoch_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min'</span>)</span>
<span id="cb6-141">        </span>
<span id="cb6-142">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Saving the results</span></span>
<span id="cb6-143">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_loss'</span>].append(train_loss)</span>
<span id="cb6-144">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_acc'</span>].append(train_acc.detach().cpu().item())</span>
<span id="cb6-145">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_loss'</span>].append(test_loss)</span>
<span id="cb6-146">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_acc'</span>].append(test_acc.detach().cpu().item())</span>
<span id="cb6-147">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'train_epoch_time(min)'</span>].append(train_epoch_time)</span>
<span id="cb6-148">        results[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'test_epoch_time(min)'</span>].append(test_epoch_time)</span>
<span id="cb6-149">        </span>
<span id="cb6-150">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculating total model training time</span></span>
<span id="cb6-151">    model_train_end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> timer()</span>
<span id="cb6-152">    total_train_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (model_train_end_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> model_train_start_time)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">60</span></span>
<span id="cb6-153">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">Total Model Training Time: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>total_train_time<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:.4f}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> min'</span>)</span>
<span id="cb6-154">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> results, total_train_time</span></code></pre></div>
</details>
<p><strong>Training the Model</strong>:</p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing Fabric # New by Fabric</span></span>
<span id="cb7-4">fabric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Fabric()</span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing the model and dataloaders</span></span>
<span id="cb7-7">model, transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_model(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fabric.device) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model.to(device)</span></span>
<span id="cb7-9">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb7-10">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb7-11"></span>
<span id="cb7-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intializing loss and optimizer</span></span>
<span id="cb7-13">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.CrossEntropyLoss()</span>
<span id="cb7-14">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb7-15"></span>
<span id="cb7-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fabric setup # New by Fabric</span></span>
<span id="cb7-17">model, optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fabric.setup(model, optimizer)</span>
<span id="cb7-18">train_dataloader, test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fabric.setup_dataloaders(train_dataloader, test_dataloader)</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting up compiled model(Introduced in PyTorch 2.0.0)</span></span>
<span id="cb7-21">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(model, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only used it for Exp 6</span></span>
<span id="cb7-22"></span>
<span id="cb7-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training the model using the function</span></span>
<span id="cb7-24">NUM_EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb7-25">exp6_results, exp6_total_train_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_train(epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_EPOCHS,</span>
<span id="cb7-26">                                                  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb7-27">                                                  train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader, </span>
<span id="cb7-28">                                                  test_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader, </span>
<span id="cb7-29">                                                  optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb7-30">                                                  loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb7-31">                                                  fabric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fabric, </span>
<span id="cb7-32">                                                  num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes))</span></code></pre></div>
</details>
<div data-notebook="notebooks/blog_figures.ipynb">
<div class="cell" data-outputid="23349e30-1e78-489b-e5a8-ea7322e9e136" data-execution_count="7">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/fig-fabric-exp-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5" title="Benchmark Comparison between Lightning Fabric Eager and Compile Mode for 3 Epochs."><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/index_files/figure-html/fig-fabric-exp-output-1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Benchmark Comparison between Lightning Fabric Eager and Compile Mode for 3 Epochs.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>Similar to the result of PyTorch but if you see the time plot, here the compile mode reaches the level of eager mode at the 3rd epoch which means that for every epoch there was a decrease in the training time.</p>
<section id="implementation-with-mixed-precision" class="level4">
<h4 class="anchored" data-anchor-id="implementation-with-mixed-precision">Implementation with Mixed Precision</h4>
<p>Fabric contains multiple different functionalities to automate manual functions, one of them being mixed precision. So I gave it a try and used mixed precision of Floating Point 16.</p>
<details>
<summary>
Code
</summary>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">set_seed(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">42</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing Fabric with precision # New by Fabric</span></span>
<span id="cb8-4">fabric <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Fabric(precision<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'16-mixed'</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initializing the model and dataloaders</span></span>
<span id="cb8-7">model, transforms <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_model(num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes), device<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fabric.device) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New by Fabric</span></span>
<span id="cb8-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># model.to(device)</span></span>
<span id="cb8-9">train_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb8-10">test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_dataloaders(dataset<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataset, batch<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BATCH_SIZE, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>WORKERS)</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Intializing loss and optimizer</span></span>
<span id="cb8-13">loss_fn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.CrossEntropyLoss()</span>
<span id="cb8-14">optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.optim.Adam(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model.parameters(), lr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0001</span>)</span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fabric setup # New by Fabric</span></span>
<span id="cb8-17">model, optimizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fabric.setup(model, optimizer)</span>
<span id="cb8-18">train_dataloader, test_dataloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fabric.setup_dataloaders(train_dataloader, test_dataloader)</span>
<span id="cb8-19"></span>
<span id="cb8-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Setting up compiled model(Introduced in PyTorch 2.0.0)</span></span>
<span id="cb8-21">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">compile</span>(model, mode<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'default'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Only used it for Exp 8</span></span>
<span id="cb8-22"></span>
<span id="cb8-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Training the model using the function</span></span>
<span id="cb8-24">NUM_EPOCHS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb8-25">exp8_results, exp8_total_train_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_train(epochs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>NUM_EPOCHS,</span>
<span id="cb8-26">                                                  model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model, </span>
<span id="cb8-27">                                                  train_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_dataloader, </span>
<span id="cb8-28">                                                  test_dataloader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>test_dataloader, </span>
<span id="cb8-29">                                                  optimizer<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>optimizer, </span>
<span id="cb8-30">                                                  loss_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>loss_fn, </span>
<span id="cb8-31">                                                  fabric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>fabric, </span>
<span id="cb8-32">                                                  num_classes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(dataset.classes))</span></code></pre></div>
</details>
<div data-notebook="notebooks/blog_figures.ipynb">
<div class="cell" data-outputid="72cdd12e-b006-49b1-e211-bb65d94302dc" data-execution_count="8">
<div class="cell-output cell-output-display">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="index_files/figure-html/fig-fabric16-exp-output-1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6" title="Benchmark Comparison between Lightning Fabric (TF16 Mixed Precision) Eager and Compile Mode for 3 Epochs."><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/index_files/figure-html/fig-fabric16-exp-output-1.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Benchmark Comparison between Lightning Fabric (TF16 Mixed Precision) Eager and Compile Mode for 3 Epochs.</figcaption><p></p>
</figure>
</div>
</div>
</div>
</div>
<p>There are no major changes, just a slight decrease in training time and the loss and accuracy are the same due to no changes in the model.</p>
</section>
</section>
</section>
<section id="results" class="level1">
<h1>Results</h1>
<p>So now that all the experiments are completed, it’s time to check the overall comparison of all the experiments and which one has performed the best.</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-figure quarto-figure-center" style="flex-basis: 50.0%;justify-content: center;">
<figure class="figure">
<p><a href="images/model_train_time_a4000.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7" title="Nvidia RTX A4000"><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/images/model_train_time_a4000.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Nvidia RTX A4000</figcaption><p></p>
</figure>
</div>
<div class="quarto-figure quarto-figure-center" style="flex-basis: 50.0%;justify-content: center;">
<figure class="figure">
<p><a href="images/model_train_time_teslat4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8" title="Nvidia Tesla T4"><img src="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/images/model_train_time_teslat4.png" class="img-fluid figure-img"></a></p>
<p></p><figcaption class="figure-caption">Nvidia Tesla T4</figcaption><p></p>
</figure>
</div>
</div>
</div>
<p>These are some shocking results I have got, If you see the plots, the PyTorch Eager mode, the first experiment that I did gave the best inference time for both the A4000 and for Tesla T4. I did not see that coming, I was hoping for the compile mode to have the best time at least for the A4000 knowing that it’s an Ampere chip with a compute capability of 8.6. This might had not been the case if we had trained the model using the A100 or A10 GPUs.</p>
<p>The PyTorch Lightning in compile mode took the longest time to train a model, one reason might be that lightning already has more computation in the background for automating multiple different tasks and we have added the compile mode which takes a longer time in the initial epoch.</p>
<p>While Pytorch shows the best speed and lightning has a hard time, fabric comes in the middle of both of them. Showing better results than Lightning and also providing some of the cool features that Lightning provides on the PyTorch code. On the other hand, adding mixed precision didn’t yield any major difference, this part needs more experimentation like modifying the hyper-parameters - batch size, etc.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>In this article, we have explored the new features that PyTorch and PyTorch Lightning has released. These features are in the stable release of version 2.0, they are still in the early stage of development and many more changes and support for different hardware will be available in the future release. There are many more experiments and optimization that need to be done, however, those are for some other days.</p>
<p>I hope that you enjoyed this article, if you want to try the codes yourself you can check them out over <a href="https://github.com/JohnPPinto/HMDB51_human_motion_recognition_pytorch" target="_blank">here</a>, do try the code on different GPUs and share the results with me, I am more than happy to improve this article.</p>


</section>

 ]]></description>
  <category>PyTorch</category>
  <category>Lightning</category>
  <category>Fabric</category>
  <category>AI</category>
  <category>Video Classification</category>
  <guid>https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/index.html</guid>
  <pubDate>Fri, 31 Mar 2023 18:30:00 GMT</pubDate>
  <media:content url="https://johnppinto.github.io/blog/posts/2023-04-01_pytorch_and_lightning_2.0/featured.png" medium="image" type="image/png" height="90" width="144"/>
</item>
<item>
  <title>TensorFlow Modelling — Sequential Vs Functional</title>
  <dc:creator>John Pinto</dc:creator>
  <link>https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/index.html</link>
  <description><![CDATA[ 




<section id="what-is-a-neural-network" class="level1">
<h1><strong>What is a Neural Network?</strong></h1>
<p><em>“A computer system modeled on the human brain and nervous system.”</em> You can google it and this is the answer you will get. It’s a simple answer but does not explain why it is used in Deep Learning.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/images/nn_brain.webp" class="img-fluid figure-img" style="width:70.0%"></p>
</figure>
</div>
<p>Neural Network also known as an Artificial Neural Network, mimics the same architecture of our human brain. It’s the core of any Deep Learning or Machine Learning Algorithm. It consists of three essential factors also called <strong>Nodes or Layers</strong>, that make up the neural network architecture. First, the <strong>Input Layer</strong> is the entry point for any data. After the data passes through the input layer it moves toward multiple <strong>Hidden Layers</strong>, this is where patterns are learned by the neural network using weights and biases. Once the network has reached its mathematical conclusion in the hidden layers it passes to the <strong>Output Layer</strong>.</p>
<p>Now, that we understand a neural network, how do we practically use them? Here comes TensorFlow, an open-source Python library for Deep Learning. <strong>TensorFlow</strong> helps us in creating neural network models that are capable to solve different types of deep learning problems, due to the complexity of neural networks TensorFlow uses the <strong>Keras</strong> library to make it simple and easy to use.</p>
<p>Tensorflow and Keras provide us with two different methods to initiate and implement our neural network architecture, they are as follows:</p>
<ol type="1">
<li>The Sequential API Model</li>
<li>The Functional API Model</li>
</ol>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/images/architecture.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Fig 1: Sequential API Vs Functional API Architecture</figcaption><p></p>
</figure>
</div>
</center>
<section id="the-sequential-api-model" class="level2">
<h2 class="anchored" data-anchor-id="the-sequential-api-model">1. The Sequential API Model</h2>
<p>The very first model that TensorFlow teaches us is the Sequential Model because it is the fastest and the simplest way to create a neural network. Now you might be wondering when to use a sequential model. <em>You use it when you have one input and one output, just like everything moves in a sequence, one at a time</em>.</p>
<p>Sequential Model Example:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sequential Model </span></span>
<span id="cb1-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.Sequential(</span>
<span id="cb1-5">    [</span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input Layer</span></span>
<span id="cb1-7">        tf.keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_layer"</span>),</span>
<span id="cb1-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4 Hidden Layers</span></span>
<span id="cb1-9">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer1"</span>),</span>
<span id="cb1-10">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer2"</span>),</span>
<span id="cb1-11">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer3"</span>),</span>
<span id="cb1-12">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer4"</span>),</span>
<span id="cb1-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output Layer</span></span>
<span id="cb1-14">        tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_layer"</span>)</span>
<span id="cb1-15">    ]</span>
<span id="cb1-16">)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The above code can also be written using add() method.</span></span>
<span id="cb1-19"></span>
<span id="cb1-20">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> tf.keras.Sequential()</span>
<span id="cb1-21">model.add(tf.keras.Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_layer"</span>))</span>
<span id="cb1-22">model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer1"</span>))</span>
<span id="cb1-23">model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer2"</span>))</span>
<span id="cb1-24">model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer3"</span>))</span>
<span id="cb1-25">model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer4"</span>))</span>
<span id="cb1-26">model.add(tf.keras.layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_layer"</span>))</span></code></pre></div>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/images/sequential.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Fig. 2: Model Architecture of the above Sequential Model example.</figcaption><p></p>
</figure>
</div>
</center>
<p>If you are seeing this for the first time you might get confused, and questions might arise like what shape, Dense, activation, relu, sigmoid, and multiple different numbers? Let’s understand everything line by line.</p>
<ol type="1">
<li><p>The first line initiates the sequential function within the name ‘model’. <em>You can click and check the documentation for the <a href="https://www.tensorflow.org/api_docs/python/tf/keras/Sequential">sequential</a> function</em>.</p></li>
<li><p>Within the sequential model, there is a list with multiple layers. The first layer is the Input layer with a shape 224, 224, 3. This tells us that the data is an image array, here you can change the shape to whatever your data is been processed in.</p></li>
<li><p>After the input layer, there are 4 fully dense hidden layers. In the sequential model, the output of the layer is the input for the next layer. Layers are basically Keras functions that apply certain mathematical calculations to learn patterns. In the hidden layer part, you can even add a sequential model as a layer, this way you can nest a model within a model.</p></li>
<li><p>Once we get an output from the last hidden layer, it goes through the output layer which is activated using sigmoid(another mathematical calculation for binary classification) this gives us an output result for our problem.</p></li>
</ol>
</section>
<section id="the-functional-api-model" class="level2">
<h2 class="anchored" data-anchor-id="the-functional-api-model">2. The Functional API Model</h2>
<p>Keras understood that the sequential model had some limitations like it couldn’t handle multiple inputs and outputs. It is not flexible enough to build a neural network that has shared layers or a non-linear branched topology. Although, sequential models were capable to produce great results. It was not capable enough to solve complex problems like object detection in computer vision, speech-to-text recognition, or vice versa, and many more. Finally, Keras came up with <strong>Functional API</strong>, here everything is isolated and combined however you see fit. A neural network that is now customizable layer-to-layer.</p>
<p>Functional API Example:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Taking similar example as above and making it more complex</span></span>
<span id="cb2-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># importing packages</span></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensorflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> tf</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.models <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Model</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tensorflow.keras.layers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Input, Dense, concatenate</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input Layer</span></span>
<span id="cb2-8">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Input(shape<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">224</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_layer"</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Two branches of hidden layers</span></span>
<span id="cb2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># First branch</span></span>
<span id="cb2-12">layer_x1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer1"</span>)(inputs)</span>
<span id="cb2-13">layer_x2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">128</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer2"</span>)(layer_x1)</span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Second branch</span></span>
<span id="cb2-15">layer_y1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">64</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer3"</span>)(inputs)</span>
<span id="cb2-16">layer_y2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">32</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"relu"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hidden_layer4"</span>)(layer_y1)</span>
<span id="cb2-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Concatenate layer</span></span>
<span id="cb2-18">cat_layer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> concatenate([layer_x2, layer_y2])</span>
<span id="cb2-19"></span>
<span id="cb2-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Output Layer</span></span>
<span id="cb2-21">outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sigmoid"</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_layer"</span>)(cat_layer)</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Defining the model</span></span>
<span id="cb2-24">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs, outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> outputs)</span></code></pre></div>
<center>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/images/functional.webp" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Fig. 3: Model Architecture of the above Functional API example.</figcaption><p></p>
</figure>
</div>
</center>
<p>Now, that you understand sequential architecture, the above functional API example should be easier for you. Most of the layers used in this example are similar to the sequential example. Just the way to represent the model has changed, but this change is powerful enough to build some of the famous pre-trained models(e.g.&nbsp;AlexNet, VGG, ResNet, Densenet, and many more). Let’s understand the changes that are happening in the functional API model.</p>
<ol type="1">
<li><p>Similar to the sequential model example, we initialize the model by importing the packages and creating our first layer — the input layer, but unlike the sequential model, we do not need to use any Keras function and can directly name the layers using a variable.</p></li>
<li><p>Now the fun part starts, we have used 4 hidden layers separated into two different branches. In Functional API, layers communicate by letting them know which layer is connected. If you look at the hidden layer “layer_x1”, at the end of the Dense layer statement it mentions the layer connected i.e.&nbsp;the input layer. This way you can chain any layer with each other and forward pass the model.</p></li>
<li><p>Now that we have created two branches but need the output from a single layer, we can use the concatenate layer. The last layer of the branches is the input for the concatenate layer which is finally connected with the output layer to give us the output probabilities.</p></li>
<li><p>All the layers are connected, so it is time to define the model, for this we will be using the Keras Model function. The Model function needs two Arguments inputs and outputs. It basically tells the start and end point and the flow of the model is created.</p></li>
</ol>
</section>
</section>
<section id="closing" class="level1">
<h1>Closing</h1>
<p>We have covered both the Sequential and Functional Model architecture in this article. Experimented with both and understood the pros and cons, with this you are now capable enough to create your neural network. By the way, there’s a third method that I haven’t mentioned in this article. It’s called the <a href="https://www.tensorflow.org/guide/keras/custom_layers_and_models">Model subclassing</a> method. I do not recommend this for a beginner to begin their journey in deep learning, it is much more complex and difficult to understand however powerful enough to create your own custom layers and models.</p>
<p>I hope that you enjoyed this article and that it serves you well. Please reach out to me or you can comment down if you run into any trouble with what I wrote. I am more than happy to improve my article so that it can help more people.</p>


</section>

 ]]></description>
  <category>Tensorflow</category>
  <category>Keras</category>
  <category>AI</category>
  <category>Neural Network</category>
  <category>Architecture</category>
  <guid>https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/index.html</guid>
  <pubDate>Sat, 19 Nov 2022 18:30:00 GMT</pubDate>
  <media:content url="https://johnppinto.github.io/blog/posts/2022-11-20_tf_modelling/featured.webp" medium="image" type="image/webp"/>
</item>
</channel>
</rss>
